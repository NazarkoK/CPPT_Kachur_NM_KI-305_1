1. **Синтаксис реалізації спадкування:**
   ```java
   class Subclass extends Superclass {
       // тіло підкласу
   }
   ```

2. **Суперклас та підклас:**
   - **Суперклас (батьківський клас):** Клас, від якого успадковуються властивості та методи.
   - **Підклас (дочірній клас):** Клас, який успадковує властивості та методи з іншого класу (суперкласу).

3. **Звернення до членів суперкласу з підкласу:**
   - З використанням ключового слова `super`:
     ```java
     super.methodName(); // виклик методу суперкласу
     ```

4. **Статичне зв’язування при виклику методу:**
   - Статичне зв’язування відбувається під час компіляції. Визначення, який метод викликати, відбувається на етапі компіляції.

5. **Динамічне зв’язування при виклику методу:**
   - Динамічне зв’язування відбувається під час виконання програми. Реалізується через механізм поліморфізму.

6. **Абстрактний клас та його реалізація:**
   - Абстрактний клас не може бути інстанційований і може містити абстрактні методи.
   - Синтаксис:
     ```java
     abstract class AbstractClass {
         abstract void abstractMethod();
     }
     ```

7. **Використання `instanceof`:**
   - `instanceof` використовується для перевірки, чи об'єкт є екземпляром певного класу або його підкласу.

8. **Перевірка підкласу:**
   - Використовуючи `instanceof`:
     ```java
     if (object instanceof Superclass) {
         // об'єкт є екземпляром суперкласу
     }
     ```

9. **Інтерфейс:**
   - Інтерфейс визначає набір методів, але не містить їх реалізації.
   - Синтаксис:
     ```java
     interface MyInterface {
         void method1();
         void method2();
     }
     ```

10. **Оголошення та застосування інтерфейсу:**
    - Оголошення:
      ```java
      class MyClass implements MyInterface {
          // реалізація методів інтерфейсу
      }
      ```
    - Застосування:
      ```java
      MyInterface obj = new MyClass();
      obj.method1();
      ```